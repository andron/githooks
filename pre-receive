#!/bin/bash

readonly z40="0000000000000000000000000000000000000000"
readonly re_maint="^M(AINTENANCE)*: ([A-Z].{10,})"
readonly re_issue="^([A-Z]{2,10}-[0-9]{1,6})(, ([A-Z]{2,10}-[0-9]{1,6}))*: ([A-Z].{10,})"

function process_ref() {
	declare -a local ary=($1)
	local old=${ary[0]}
	local new=${ary[1]}
	local ref=${ary[2]}

	if [ "$old" == "$z40" ]; then
		local skip=$(git for-each-ref --format="^%(refname:short)" refs/heads)
		local revs=$(git rev-list $new $skip)
	else
		local revs=$(git rev-list ${old}..${new})
	fi

	local block=0
	for r in $revs; do
		declare -a local errlist=()

		local summary=$(git show -s --format=%s $r)
		if [ ${#summary} -lt 15 -o ${#summary} -gt 65 ]; then
			errlist+=("length")
		fi

		# Remove the following to skip format check
		if [[ (! $summary =~ $re_issue) &&
					(! $summary =~ $re_maint) ]]; then
			errlist+=("format")
		fi

		if [ "${summary: -1}" == "." ]; then
			errlist+=("dot-at-end")
		fi

		while read -s line; do
			if [ ${#line} -gt 72 ]; then
				errlist+=("body")
				break
			fi
		done <<< $(git show -s --format=%b $r)

		if [ ${#errlist[@]} -gt 0 ]; then
			local errstr=$(IFS='/'; echo "${errlist[*]}")
			echo "$ref:${r:0:7}: $errstr"
			block=1
		fi
	done
	return $block
}


# Process each received ref
while read -s args; do
	process_ref "$args" || block=1
done <&0


# Print advisory message about format
if [ $block ]; then
	cat <<EOF

== BAD COMMIT MESSAGE(S) ==
  (use "git rebase -i <upstream> [<branch>]" to amend

Commit message format:
1: Summary line, 15-65 chars
2: <BLANK>
3: Multi-line body, 0-72 chars per line
4: ...

Summary line format:
   MAINT: <Summary>
or MAINTENANCE: <Summary>
or <ISSUE KEY>[, <ISSUE KEY>]: <Summary>

More information:
  http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
  https://wiki.openstack.org/wiki/GitCommitMessages

EOF
	exit 1
fi 
